---
## Note: the container by default expects to find this file at /config/configuration.yml.
theme: light
default_redirection_url: "https://{{ domain }}/"
default_2fa_method: "totp"

server:
    host: 0.0.0.0
    port: 9091
    path: ""
    enable_pprof: false
    enable_expvars: false
    disable_healthcheck: true

log:
    # options: info, debug, trace
    level: info

    ## Format the logs are written as: json, text.
    format: json
    file_path: /config/authelia.log
    keep_stdout: true

telemetry:
    metrics:
        enabled: true
        address: tcp://0.0.0.0:9959

totp:
    disable: false
    issuer: "{{ domain }}"
    algorithm: sha1
    digits: 6
    period: 30
    skew: 1
    secret_size: 32

webauthn:
    disable: false
    timeout: 60s
    display_name: "{{ domain }}"
    attestation_conveyance_preference: indirect
    user_verification: preferred

## This is used to validate the servers time is accurate enough to validate TOTP.
ntp:
    ## NTP server address.
    address: "time.cloudflare.com:123"

    ## NTP version.
    version: 4

    ## Maximum allowed time offset between the host and the NTP server.
    max_desync: 3s

    ## Disables the NTP check on startup entirely. This means Authelia will not contact a remote service at all if you
    ## set this to true, and can operate in a truly offline mode.
    disable_startup_check: false

    ## The default of false will prevent startup only if we can contact the NTP server and the time is out of sync with
    ## the NTP server more than the configured max_desync. If you set this to true, an error will be logged but startup
    ## will continue regardless of results.
    disable_failure: false

authentication_backend:
    password_reset:
        disable: false
        ## External reset password url that redirects the user to an external reset portal. This disables the internal reset
        ## functionality.
        # custom_url: ""

    refresh_interval: 5m
    file:
        path: /config/users_database.yml
        watch: false
        search:
            email: false
            case_insensitive: false
        password:
            algorithm: argon2
            argon2:
                variant: argon2id
                iterations: 3
                memory: 65536
                parallelism: 4
                key_length: 32
                salt_length: 16

password_policy:
    standard:
        enabled: false
        min_length: 8
        max_length: 0
        require_uppercase: true
        require_lowercase: true
        require_number: true
        require_special: true

    zxcvbn:
        enabled: true
        min_score: 3

# Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
access_control:
    ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
    ## resource if there is no policy to be applied to the user.
    default_policy: deny
    rules:
        # Rules applied to everyone
        - domain: "*.{{ localm }}"
          policy: bypass

        # Rules applied to everyone
        - domain: "{{ domain }}"
          policy: one_factor

        - domain: "*.{{ domain }}"
          policy: two_factor

session:
    ## The name of the session cookie.
    name: session

    ## The domain to protect.
    ## Note: the authenticator must also be in that domain.
    ## If empty, the cookie is restricted to the subdomain of the issuer.
    domain: "{{ domain }}"

    ## Sets the Cookie SameSite value. Possible options are none, lax, or strict.
    ## Please read https://www.authelia.com/c/session#same_site
    same_site: lax

    ## The time before the cookie expires and the session is destroyed if remember me IS NOT selected.
    expiration: 1h
    inactivity: 5m
    remember_me_duration: 1M

## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made
## in a short period of time.
regulation:
    ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
    max_retries: 3

    ## The time range during which the user can attempt login before being banned. The user is banned if the
    ## authentication failed 'max_retries' times in a 'find_time' seconds window. Find Time accepts duration notation.
    ## See: https://www.authelia.com/c/common#duration-notation-format
    find_time: 2m

    ## The length of time before a banned user can login again. Ban Time accepts duration notation.
    ## See: https://www.authelia.com/c/common#duration-notation-format
    ban_time: 5m

storage:
    postgres:
        host: postgres
        port: 5432
        database: authelia
        schema: public
        username: "{{ postgres_user }}"
        timeout: 5s

notifier:
    ## You can disable the notifier startup check by setting this to true.
    disable_startup_check: false

    #
    # File System (Notification Provider)
    #
    # Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness
    #
    filesystem:
        filename: /config/notification.txt

    # #
    # # SMTP (Notification Provider)
    # #
    # # Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate.
    # # [Security] By default Authelia will:
    # #   - force all SMTP connections over TLS including unauthenticated connections
    # #      - use the disable_require_tls boolean value to disable this requirement
    # #        (only works for unauthenticated connections)
    # #   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
    # #     (configure in tls section)
    # smtp:
    #   # The SMTP host to connect to.
    #   host: 127.0.0.1

    #   # The port to connect to the SMTP host on.
    #   port: 1025

    #   # The connection timeout.
    #   timeout: 5s

    #   # The username used for SMTP authentication.
    #   username: test

    #   # The password used for SMTP authentication.
    #   # Can also be set using a secret: https://www.authelia.com/c/secrets
    #   password: password

    #   # The sender is used to is used for the MAIL FROM command and the FROM header.
    #   # If this is not defined and the username is an email, we use the username as this value. This can either be just
    #   # an email address or the RFC5322 'Name <email address>' format.
    #   sender: "Authelia <admin@example.com>"

    #   # HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost.
    #   identifier: localhost

    #   # Subject configuration of the emails sent. {title} is replaced by the text from the notifier.
    #   subject: "[Authelia] {title}"

    #   # This address is used during the startup check to verify the email configuration is correct.
    #   # It's not important what it is except if your email server only allows local delivery.
    #   startup_check_address: test@authelia.com

    #   # By default we require some form of TLS. This disables this check though is not advised.
    #   disable_require_tls: false

    #   # Disables sending HTML formatted emails.
    #   disable_html_emails: false

    #   tls:
    #     # The server subject name to check the servers certificate against during the validation process.
    #     # This option is not required if the certificate has a SAN which matches the host option.
    #     server_name: smtp.example.com

    #     # Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the
    #     # certificate or the certificate of the authority signing the certificate to the certificates directory which is
    #     # defined by the `certificates_directory` option at the top of the configuration.
    #     # It's important to note the public key should be added to the directory, not the private key.
    #     # This option is strongly discouraged but may be useful in some self-signed situations where validation is not
    #     # important to the administrator.
    #     skip_verify: false

    #     # Minimum TLS version for the connection.
    #     minimum_version: TLS1.2

    #     # Maximum TLS version for the connection.
    #     maximum_version: TLS1.3

    #     # The certificate chain used with the private_key if the server requests TLS Client Authentication
    #     # i.e. Mutual TLS.
    #     certificate_chain: |
    #       -----BEGIN CERTIFICATE-----
    #       MIIC5jCCAc6gAwIBAgIRAK4Sj7FiN6PXo/urPfO4E7owDQYJKoZIhvcNAQELBQAw
    #       EzERMA8GA1UEChMIQXV0aGVsaWEwHhcNNzAwMTAxMDAwMDAwWhcNNzEwMTAxMDAw
    #       MDAwWjATMREwDwYDVQQKEwhBdXRoZWxpYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    #       ADCCAQoCggEBAPKv3pSyP4ozGEiVLJ14dIWFCEGEgq7WUMI0SZZqQA2ID0L59U/Q
    #       /Usyy7uC9gfMUzODTpANtkOjFQcQAsxlR1FOjVBrX5QgjSvXwbQn3DtwMA7XWSl6
    #       LuYx2rBYSlMSN5UZQm/RxMtXfLK2b51WgEEYDFi+nECSqKzR4R54eOPkBEWRfvuY
    #       91AMjlhpivg8e4JWkq4LVQUKbmiFYwIdK8XQiN4blY9WwXwJFYs5sQ/UYMwBFi0H
    #       kWOh7GEjfxgoUOPauIueZSMSlQp7zqAH39N0ZSYb6cS0Npj57QoWZSY3ak87ebcR
    #       Nf4rCvZLby7LoN7qYCKxmCaDD3x2+NYpWH8CAwEAAaM1MDMwDgYDVR0PAQH/BAQD
    #       AgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcN
    #       AQELBQADggEBAHSITqIQSNzonFl3DzxHPEzr2hp6peo45buAAtu8FZHoA+U7Icfh
    #       /ZXjPg7Xz+hgFwM/DTNGXkMWacQA/PaNWvZspgRJf2AXvNbMSs2UQODr7Tbv+Fb4
    #       lyblmMUNYFMCFVAMU0eIxXAFq2qcwv8UMcQFT0Z/35s6PVOakYnAGGQjTfp5Ljuq
    #       wsdc/xWmM0cHWube6sdRRUD7SY20KU/kWzl8iFO0VbSSrDf1AlEhnLEkp1SPaxXg
    #       OdBnl98MeoramNiJ7NT6Jnyb3zZ578fjaWfThiBpagItI8GZmG4s4Ovh2JbheN8i
    #       ZsjNr9jqHTjhyLVbDRlmJzcqoj4JhbKs6/I^invalid DO NOT USE=
    #       -----END CERTIFICATE-----
    #       -----BEGIN CERTIFICATE-----
    #       MIIDBDCCAeygAwIBAgIRALJsPg21kA0zY4F1wUCIuoMwDQYJKoZIhvcNAQELBQAw
    #       EzERMA8GA1UEChMIQXV0aGVsaWEwHhcNNzAwMTAxMDAwMDAwWhcNNzEwMTAxMDAw
    #       MDAwWjATMREwDwYDVQQKEwhBdXRoZWxpYTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    #       ADCCAQoCggEBAMXHBvVxUzYk0u34/DINMSF+uiOekKOAjOrC6Mi9Ww8ytPVO7t2S
    #       zfTvM+XnEJqkFQFgimERfG/eGhjF9XIEY6LtnXe8ATvOK4nTwdufzBaoeQu3Gd50
    #       5VXr6OHRo//ErrGvFXwP3g8xLePABsi/fkH3oDN+ztewOBMDzpd+KgTrk8ysv2ou
    #       kNRMKFZZqASvCgv0LD5KWvUCnL6wgf1oTXG7aztduA4oSkUP321GpOmBC5+5ElU7
    #       ysoRzvD12o9QJ/IfEaulIX06w9yVMo60C/h6A3U6GdkT1SiyTIqR7v7KU/IWd/Qi
    #       Lfftcj91VhCmJ73Meff2e2S2PrpjdXbG5FMCAwEAAaNTMFEwDgYDVR0PAQH/BAQD
    #       AgKkMA8GA1UdJQQIMAYGBFUdJQAwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU
    #       Z7AtA3mzFc0InSBA5fiMfeLXA3owDQYJKoZIhvcNAQELBQADggEBAEE5hm1mtlk/
    #       kviCoHH4evbpw7rxPxDftIQlqYTtvMM4eWY/6icFoSZ4fUHEWYyps8SsPu/8f2tf
    #       71LGgZn0FdHi1QU2H8m0HHK7TFw+5Q6RLrLdSyk0PItJ71s9en7r8pX820nAFEHZ
    #       HkOSfJZ7B5hFgUDkMtVM6bardXAhoqcMk4YCU96e9d4PB4eI+xGc+mNuYvov3RbB
    #       D0s8ICyojeyPVLerz4wHjZu68Z5frAzhZ68YbzNs8j2fIBKKHkHyLG1iQyF+LJVj
    #       2PjCP+auJsj6fQQpMGoyGtpLcSDh+ptcTngUD8JsWipzTCjmaNqdPHAOYmcgtf4b
    #       qocikt3WAdU^invalid DO NOT USE=
    #       -----END CERTIFICATE-----

    #     # The private key used with the certificate_chain if the server requests TLS Client Authentication
    #     # i.e. Mutual TLS.
    #     private_key: |
    #        -----BEGIN RSA PRIVATE KEY-----
    #       MIIEpAIBAAKCAQEA8q/elLI/ijMYSJUsnXh0hYUIQYSCrtZQwjRJlmpADYgPQvn1
    #       T9D9SzLLu4L2B8xTM4NOkA22Q6MVBxACzGVHUU6NUGtflCCNK9fBtCfcO3AwDtdZ
    #       KXou5jHasFhKUxI3lRlCb9HEy1d8srZvnVaAQRgMWL6cQJKorNHhHnh44+QERZF+
    #       +5j3UAyOWGmK+Dx7glaSrgtVBQpuaIVjAh0rxdCI3huVj1bBfAkVizmxD9RgzAEW
    #       LQeRY6HsYSN/GChQ49q4i55lIxKVCnvOoAff03RlJhvpxLQ2mPntChZlJjdqTzt5
    #       txE1/isK9ktvLsug3upgIrGYJoMPfHb41ilYfwIDAQABAoIBAQDTOdFf2JjHH1um
    #       aPgRAvNf9v7Nj5jytaRKs5nM6iNf46ls4QPreXnMhqSeSwj6lpNgBYxOgzC9Q+cc
    #       Y4ob/paJJPaIJTxmP8K/gyWcOQlNToL1l+eJ20eQoZm23NGr5fIsunSBwLEpTrdB
    #       ENqqtcwhW937K8Pxy/Q1nuLyU2bc6Tn/ivLozc8n27dpQWWKh8537VY7ancIaACr
    #       LJJLYxKqhQpjtBWAyCDvZQirnAOm9KnvIHaGXIswCZ4Xbsu0Y9NL+woARPyRVQvG
    #       jfxy4EmO9s1s6y7OObSukwKDSNihAKHx/VIbvVWx8g2Lv5fGOa+J2Y7o9Qurs8t5
    #       BQwMTt0BAoGBAPUw5Z32EszNepAeV3E2mPFUc5CLiqAxagZJuNDO2pKtyN29ETTR
    #       Ma4O1cWtGb6RqcNNN/Iukfkdk27Q5nC9VJSUUPYelOLc1WYOoUf6oKRzE72dkMQV
    #       R4bf6TkjD+OVR17fAfkswkGahZ5XA7j48KIQ+YC4jbnYKSxZTYyKPjH/AoGBAP1i
    #       tqXt36OVlP+y84wWqZSjMelBIVa9phDVGJmmhz3i1cMni8eLpJzWecA3pfnG6Tm9
    #       ze5M4whASleEt+M00gEvNaU9ND+z0wBfi+/DwJYIbv8PQdGrBiZFrPhTPjGQUldR
    #       lXccV2meeLZv7TagVxSi3DO6dSJfSEHyemd5j9mBAoGAX8Hv+0gOQZQCSOTAq8Nx
    #       6dZcp9gHlNaXnMsP9eTDckOSzh636JPGvj6m+GPJSSbkURUIQ3oyokMNwFqvlNos
    #       fTaLhAOfjBZI9WnDTTQxpugWjphJ4HqbC67JC/qIiw5S6FdaEvGLEEoD4zoChywZ
    #       9oGAn+fz2d/0/JAH/FpFPgsCgYEAp/ipZgPzziiZ9ov1wbdAQcWRj7RaWnssPFpX
    #       jXwEiXT3CgEMO4MJ4+KWIWOChrti3qFBg6i6lDyyS6Qyls7sLFbUdC7HlTcrOEMe
    #       rBoTcCI1GqZNlqWOVQ65ZIEiaI7o1vPBZo2GMQEZuq8mDKFsOMThvvTrM5cAep84
    #       n6HJR4ECgYABWcbsSnr0MKvVth/inxjbKapbZnp2HUCuw87Ie5zK2Of/tbC20wwk
    #       yKw3vrGoE3O1t1g2m2tn8UGGASeZ842jZWjIODdSi5+icysQGuULKt86h/woz2SQ
    #       27GoE2i5mh6Yez6VAYbUuns3FcwIsMyWLq043Tu2DNkx9ijOOAuQzw^invalid..
    #       DO NOT USE==
    #       -----END RSA PRIVATE KEY-----
